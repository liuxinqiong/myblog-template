/*!
 * Start Bootstrap - CleanSKY Blog v1.0.0-alpha ()
 * Copyright 2013-2017 sky
 * Licensed under MIT ()
 */
$(function(){$("body").on("input propertychange",".floating-label-form-group",function(a){$(this).toggleClass("floating-label-form-group-with-value",!!$(a.target).val())}).on("focus",".floating-label-form-group",function(){$(this).addClass("floating-label-form-group-with-focus")}).on("blur",".floating-label-form-group",function(){$(this).removeClass("floating-label-form-group-with-focus")})}),jQuery(document).ready(function(a){var i=1170;if(a(window).width()>i){var t=a("#mainNav").height();a(window).on("scroll",{previousTop:0},function(){var i=a(window).scrollTop();i<this.previousTop?i>0&&a("#mainNav").hasClass("is-fixed")?a("#mainNav").addClass("is-visible"):a("#mainNav").removeClass("is-visible is-fixed"):i>this.previousTop&&(a("#mainNav").removeClass("is-visible"),i>t&&!a("#mainNav").hasClass("is-fixed")&&a("#mainNav").addClass("is-fixed")),this.previousTop=i})}}),function(a){var i={init:function(a,t){return function(){i.fillHtml(a,t),i.bindEvent(a,t)}()},fillHtml:function(i,t){return function(i,t){var r="";t.currPage>1&&(r+="<li class='prev'><a href='javascript:void(0);'>prev</a></li>"),t.currPage>=4&&4!=t.totalPage&&(r+="<li class='normal'><a href='javascript:void(0);'>1</a></li>"),t.currPage>4&&t.currPage<=t.totalPage&&t.totalPage>5&&(r+="<li><a href='javascript:void(0);'>...</a></li>");var l=t.currPage-2,e=t.currPage+2;for((l>1&&t.currPage<4||1==t.currPage)&&e++,t.currPage>t.totalPage-4&&t.currPage>=t.totalPage&&l--;l<=e;l++)l<=t.totalPage&&l>=1&&(r+=l!=t.currPage?"<li class='normal'><a href='javascript:void(0);'>"+l+"</a></li>":"<li class='normal active'><a href='javascript:void(0);'>"+l+"</a></li>");t.currPage+2<t.totalPage-1&&t.currPage>=1&&t.totalPage>5&&(r+="<li><a href='javascript:void(0);'>...</a></li>"),t.currPage!=t.totalPage&&t.currPage<t.totalPage-2&&4!=t.totalPage&&(r+="<li class='normal'><a href='javascript:void(0);'>"+t.totalPage+"</a></li>"),t.currPage<t.totalPage&&(r+="<li class='next'><a href='javascript:void(0);'>next</a></li>"),a(i).find(".pagination").html(r)}(i,t)},bindEvent:function(t,r){return function(t,r){t.on("click","li.normal",function(l){var e=parseInt(a(this).text());i.fillHtml(t,{currPage:e,totalPage:r.totalPage}),"function"==typeof r.backFn&&r.backFn(e)}),t.on("click","li.prev",function(){var l=parseInt(a(this).parent().find("li.active>a").text());i.fillHtml(t,{currPage:l-1,totalPage:r.totalPage}),"function"==typeof r.backFn&&r.backFn(l-1)}),t.on("click","li.next",function(){var l=parseInt(a(this).parent().find("li.active>a").text());i.fillHtml(t,{currPage:l+1,totalPage:r.totalPage}),"function"==typeof r.backFn&&r.backFn(l+1)})}(t,r)}};a.fn.createPage=function(a){i.init(this,a)}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
